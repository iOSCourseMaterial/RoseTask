/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2013 Google Inc.
 */

//
//  GTLQueryRosetask.h
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   rosetask/v1
// Description:
//   Rose Task API
// Classes:
//   GTLQueryRosetask (10 custom class methods, 7 custom properties)

#if GTL_BUILT_AS_FRAMEWORK
  #import "GTL/GTLQuery.h"
#else
  #import "GTLQuery.h"
#endif

@class GTLRosetaskTask;
@class GTLRosetaskTaskList;
@class GTLRosetaskTaskUser;

@interface GTLQueryRosetask : GTLQuery

//
// Parameters valid on all methods.
//

// Selector specifying which fields to include in a partial response.
@property (copy) NSString *fields;

//
// Method-specific parameters; see the comments below for more information.
//
// identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
@property (assign) long long identifier;
@property (assign) long long limit;
@property (copy) NSString *lowercaseEmail;
@property (copy) NSString *order;
@property (copy) NSString *pageToken;
@property (assign) long long taskListId;

#pragma mark -
#pragma mark "task" methods
// These create a GTLQueryRosetask object.

// Method: rosetask.task.delete
// Task Delete.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTask.
+ (id)queryForTaskDeleteWithIdentifier:(long long)identifier;

// Method: rosetask.task.get
// Task get.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTask.
+ (id)queryForTaskGetWithIdentifier:(long long)identifier;

// Method: rosetask.task.gettasks
// Returns the Tasks that share the task_list_id (ie Tasks that are in the
// TaskList)
//  Optional:
//   order: NSString
//   pageToken: NSString
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTaskCollection.
+ (id)queryForTaskGettasksWithTaskListId:(long long)taskListId;

// Method: rosetask.task.insert
// Insert a Task.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTask.
+ (id)queryForTaskInsertWithObject:(GTLRosetaskTask *)object;

#pragma mark -
#pragma mark "tasklist" methods
// These create a GTLQueryRosetask object.

// Method: rosetask.tasklist.delete
// Delete a TaskList.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTaskList.
+ (id)queryForTasklistDeleteWithIdentifier:(long long)identifier;

// Method: rosetask.tasklist.get
// TaskList get.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTaskList.
+ (id)queryForTasklistGetWithIdentifier:(long long)identifier;

// Method: rosetask.tasklist.gettasklists
// Returns all the TaskLists for the logged in user.
//  Optional:
//   limit: Default 20
//   order: Default kGTLRosetaskOrderWhen
//      kGTLRosetaskOrderTitle: "TITLE"
//      kGTLRosetaskOrderWhen: "WHEN"
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskApiMessagesTaskListListResponse.
+ (id)queryForTasklistGettasklists;

// Method: rosetask.tasklist.insert
// Insert a TaskList.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTaskList.
+ (id)queryForTasklistInsertWithObject:(GTLRosetaskTaskList *)object;

#pragma mark -
#pragma mark "taskuser" methods
// These create a GTLQueryRosetask object.

// Method: rosetask.taskuser.get
// TaskUser get.
//  Optional:
//   lowercaseEmail: NSString
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskApiMessagesTaskUserResponseMessage.
+ (id)queryForTaskuserGet;

// Method: rosetask.taskuser.insert
// Insert a TaskUser.
//  Authorization scope(s):
//   kGTLAuthScopeRosetaskUserinfoEmail
// Fetches a GTLRosetaskTaskUser.
+ (id)queryForTaskuserInsertWithObject:(GTLRosetaskTaskUser *)object;

@end
